This document is my thought process and discoveries in trying to reason out how totalistic cellular automata function

k = 3

0 1 2

000 
001 
002 
010 
011 
012 
020
021 
022 
100 
101 
102 
110 
111 
112 
120 
121 
122 
200 
201
202
210
211 
212 
220 
221 
222

27 possible states

k^3 = # possible states, 3 because we only have 3 digits, if we had 4 or 5 it would be k^4 and k^5 respectively


ok, but if k < 3 how does it work

k = 2
0 1

000
001
010
011
100
101
110
111

8 possible states

2^3 = 8 so the rule k^3 = # possible states holds true for this


Now, for k > 3, lets see if this checks out

k = 4
0 1 2 3

000
001
002
003
010
011
012
013
020
021
022
023
030
031
032
033
100
101
102
103
110
111
112
113
120
121
122
123
130
131
132
133
200
201
202
203
210
211
212
213
220
221
222
223
230
231
232
233
300
301
302
303
310
311
312
313
320
321
322
323
330
331
332
333

# possible states = 64

4^3 = 64, so the k^3 rule also checks out here


But in totalistic Cellular Automata it is based on the average of the 3 cells, so how many possible averages are there for 3 numbers within the range 0-(k-1)?

To calculate the average we add up all the numbers and divide by the number of numbers added together.

So in our case of the cells

(leftCell + middleCell + rightCell) / 3

The smallest average we can possibly have is 0, this occurrs when all the cells are 0, (0 + 0 + 0) / 3 = 0

The largest acerage we can possibly have is ((k-1) + (k-1) + (k-1)) / 3 = some number dependent on k
k-1 because the largest number we can have is k-1, 0 is the first number

This can be rewritten as 3(k-1) / 3
Further simplification yeilds k-1 = largest possible average

I find this result rather interesting and conveinent, the largest average value, fits perfectly into the range of 0-(k-1). I suppose it does make sense though.

Nonetheless we want the amount of possible averages, so how can we calculate this?

It would be simple to say that the number of possible averages is (k-1) because (k-1) is the largest possible average and 0 the lowest average, so all other averages must fall somewhere between them.

To check this I will make a program that calculates the averages of the digits of all the number combinations for a 3 digit number of base k and counts the unique averages.

After running the program there are 2 results.

1. if integer types are used ( no decimals ) then there are only k unique averages, and they consist of 0 .. (k-1)
2. if floats ares used the averages do repeat, there is just more of them. ex: if k=3 there is 7, k=4 there is 10

There is a formula to calculate this, it is 3k - 2 but where does this come from.

Well after thinking about it the only combinations that will yeild different averages are those who have different sum values. I would also go as far as to say that this is equal to the number of unique averages.

It makes sense too if you had 10 different numbers being divided by the same number, you would get a different number every time.

That means combinations like 010 100 001 are all equal and should be counted as one.

So now the question is how can we find all the unique sums?

This is especially tricky because not only are 101 011 110 equal to each other they are euqal to to 200 002 020, so the pattern is not immediately obvious.

Thinking about this though reminds me of the classic problem of summing the numbers from 1 to 100 and there happens to be a formula for that. I am unsure if this is relevant though.

The simple anwser to this problem to is to sum up the numbers and count the unique sums. I will write a program to do this.

I've made the program and it seems that my previous statement about the number of unique sums being equal to the number of unique averages because they are equal.

It also seems that as k increases by 1 the number of unique sums is equal to the number of unique sums of (k-1) + 3

I don't know why this ocurrs but it does. when k = 2 the # of unique sums = 4, k=3 it is 7, k=4 it is 7, so on and so forth.

k = 1 is invalid because we need a binary state (k = 2) at least.

So it grows linearly by 3 every time, but it is not correct to say that 3 * k = the number of unique sums, because 3 * 2 = 6 and when k = 2 there is 4 unique sums.

Similiarly for k = 3, 3 * = 9 and when k = 3 there are 7 unique sums. So then it seems that the offset is 2. That gives the equation 3k - 2 = unique sums = unique averages

It is hard to say if this is how wolfram found this formula, mainly because I already new it going into this. The whole point of this was to see where that came from through logical analysis.

And based on what has occurred I think it probable that this is how it might of happened.

There might be better ways but I likely do not know the math involved to do so.

Nonetheless it makes sense where 3k - 2 comes from now.

So let us wrap this up into a concise piece:

A 1 dimension totalistic cellular automata uses the averages of it's neighbors values and its own value to determine the next state of the cell. k gives the number of states a cell can have, k must be > 2, k = 2 being the binary state. We need the number of unique averages because they represent all the unique configurations the cells can have, this can be calculated with the equation (3k - 2). Now knowing the number of unique possible states, we must assign a result to each state. This result will be the next value / state the cell takes upon. Valid values are 0 through (k-1). This essentially means that we have a number of base k that is (3k - 2) digits long. So that means there are k^(3k-2) possible combinations for the rule that determines the evolution of the cell. This rule is known as the Code

